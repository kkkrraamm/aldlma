import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:url_launcher/url_launcher.dart';
import 'ask_dalma_dialog.dart';
import 'login_page.dart';
import 'auth.dart';
import 'package:video_player/video_player.dart';
import 'package:visibility_detector/visibility_detector.dart';
import 'notifications.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'theme_config.dart';

class TrendsPage extends StatefulWidget {
  const TrendsPage({Key? key}) : super(key: key);

  @override
  _TrendsPageState createState() => _TrendsPageState();
}

class _TrendsPageState extends State<TrendsPage> {
  final TextEditingController _searchController = TextEditingController();
  List<Map<String, dynamic>> _filteredJournalists = [];
  List<String> _followingList = []; // قائمة معرفات الإعلاميين المتابعين
  bool _isLoggedIn = false; // محاكاة حالة تسجيل الدخول
  final Set<String> _likedPosts = {}; // منشورات تم الإعجاب بها
  final Set<String> _savedPosts = {}; // منشورات تم حفظها
  
  // مفتاح المستخدم الحالي للحفظ المحلي
  String? _userKey;

  // بيانات الإعلاميين المعتمدين
  final List<Map<String, dynamic>> verifiedJournalists = [
    {
      'id': '1',
      'name': 'أحمد العتيبي',
      'username': '@ahmed_alotaibi',
      'specialty': 'مراسل سياسي',
      'avatar': 'assets/img/arar.png',
      'followers': 15420,
      'following': 892,
      'posts': 1247,
      'bio': 'مراسل سياسي متخصص في الشؤون المحلية والدولية',
      'phone': '+966501234567',
      'email': 'ahmed@news.com',
      'isVerified': true,
    },
    {
      'id': '2',
      'name': 'فاطمة الزهراني',
      'username': '@fatima_alzahrani',
      'specialty': 'مراسلة اقتصادية',
      'avatar': 'assets/img/arar.png',
      'followers': 12890,
      'following': 654,
      'posts': 892,
      'bio': 'مراسلة اقتصادية متخصصة في الأسواق المالية',
      'phone': '+966507654321',
      'email': 'fatima@business.com',
      'isVerified': true,
    },
    {
      'id': '3',
      'name': 'محمد الشمري',
      'username': '@mohammed_alshamri',
      'specialty': 'مراسل رياضي',
      'avatar': 'assets/img/arar.png',
      'followers': 22150,
      'following': 1203,
      'posts': 1567,
      'bio': 'مراسل رياضي متخصص في كرة القدم المحلية',
      'phone': '+966509876543',
      'email': 'mohammed@sports.com',
      'isVerified': true,
    },
  ];

  // بيانات المنشورات
  final List<Map<String, dynamic>> journalistPosts = [
    {
      'id': '1',
      'journalistId': '1',
      'title': 'تقرير: التطوير الحضري في عرعر',
      'content': 'تقرير شامل عن مشاريع التطوير الحضري الجديدة في مدينة عرعر...',
      'imageUrl': 'assets/img/تنزيل.jpeg',
      'videoUrl': 'assets/videos/Download.mp4',
      'type': 'video',
      'likes': 245,
      'comments': 67,
      'shares': 23,
      'timestamp': 'منذ ساعتين',
      'hashtags': ['#عرعر', '#التطوير_الحضري', '#الأخبار_المحلية'],
    },
    {
      'id': '2',
      'journalistId': '2',
      'title': 'تحليل: مؤشرات الاقتصاد المحلي',
      'content': 'تحليل مفصل لمؤشرات الاقتصاد المحلي واتجاهات النمو...',
      'imageUrl': 'assets/img/تنزيل.jpeg',
      'type': 'image',
      'likes': 189,
      'comments': 34,
      'shares': 12,
      'timestamp': 'منذ 4 ساعات',
      'hashtags': ['#الاقتصاد', '#التحليل_المالي', '#النمو'],
    },
    {
      'id': '3',
      'journalistId': '3',
      'title': 'مباراة اليوم: النتائج المباشرة',
      'content': 'تغطية مباشرة لمباراة اليوم مع النتائج والتعليقات...',
      'imageUrl': 'assets/img/تنزيل.jpeg',
      'type': 'text',
      'likes': 567,
      'comments': 123,
      'shares': 89,
      'timestamp': 'منذ 6 ساعات',
      'hashtags': ['#كرة_القدم', '#النتائج_المباشرة', '#الرياضة'],
    },
  ];

  @override
  void initState() {
    super.initState();
    _filteredJournalists = List.from(verifiedJournalists);
    _searchController.addListener(_onSearchChanged);
    // استمع لحالة الدخول العالمية
    AuthState.instance.addListener(_authListener);
    _isLoggedIn = AuthState.instance.isLoggedIn;
    _userKey = AuthState.instance.phone;
    if (_isLoggedIn) {
      _loadInteractions();
    }
  }

  @override
  void dispose() {
    _searchController.dispose();
    AuthState.instance.removeListener(_authListener);
    super.dispose();
  }

  void _authListener() {
    if (!mounted) return;
    setState(() {
      _isLoggedIn = AuthState.instance.isLoggedIn;
      _userKey = AuthState.instance.phone;
      if (_isLoggedIn) {
        // حمّل تفاعلات المستخدم من التخزين المحلي
        _loadInteractions();
      } else {
        // صفّر الحالة عند تسجيل الخروج
        _followingList = [];
        _likedPosts.clear();
        _savedPosts.clear();
      }
    });
  }

  Future<void> _loadInteractions() async {
    if (!_isLoggedIn) return;
    final prefs = await SharedPreferences.getInstance();
    final key = _userKey ?? 'user';
    final likes = prefs.getStringList('likes_' + key) ?? <String>[];
    final saves = prefs.getStringList('saves_' + key) ?? <String>[];
    final follows = prefs.getStringList('follows_' + key) ?? <String>[];
    if (!mounted) return;
    setState(() {
      _likedPosts
        ..clear()
        ..addAll(likes);
      _savedPosts
        ..clear()
        ..addAll(saves);
      _followingList = List<String>.from(follows);
    });
  }

  Future<void> _persistInteractions() async {
    if (!_isLoggedIn) return;
    final prefs = await SharedPreferences.getInstance();
    final key = _userKey ?? 'user';
    await prefs.setStringList('likes_' + key, _likedPosts.toList());
    await prefs.setStringList('saves_' + key, _savedPosts.toList());
    await prefs.setStringList('follows_' + key, _followingList);
  }

  void _onSearchChanged() {
    setState(() {
      if (_searchController.text.isEmpty) {
        _filteredJournalists = List.from(verifiedJournalists);
      } else {
        _filteredJournalists = verifiedJournalists.where((journalist) {
          return journalist['name'].toLowerCase().contains(_searchController.text.toLowerCase()) ||
                 journalist['username'].toLowerCase().contains(_searchController.text.toLowerCase()) ||
                 journalist['specialty'].toLowerCase().contains(_searchController.text.toLowerCase());
        }).toList();
      }
    });
  }

  void _requireLogin(VoidCallback action) {
    if (_isLoggedIn) {
      action();
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('الرجاء تسجيل الدخول للتفاعل مع المنشورات', style: GoogleFonts.cairo()),
          behavior: SnackBarBehavior.floating,
        ),
      );
    }
  }

  void _toggleFollow(String journalistId) {
    setState(() {
      if (_followingList.contains(journalistId)) {
        _followingList.remove(journalistId);
      } else {
        _followingList.add(journalistId);
      }
    });
    _persistInteractions();
  }

  void _showFollowingList() {
    final theme = ThemeConfig.instance;
    final isDark = theme.isDarkMode;
    
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.7,
        decoration: BoxDecoration(
          color: isDark ? ThemeConfig.kNightSoft : Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        ),
        child: Column(
          children: [
            Container(
              width: 40,
              height: 4,
              margin: EdgeInsets.symmetric(vertical: 12),
              decoration: BoxDecoration(
                color: theme.textSecondaryColor.withOpacity(0.3),
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            Padding(
              padding: EdgeInsets.all(16),
              child: Text(
                'قائمة المتابعين (${_followingList.length})',
                style: GoogleFonts.cairo(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Color(0xFF10B981),
                ),
              ),
            ),
            Expanded(
              child: _followingList.isEmpty
                  ? Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(
                            Icons.person_add_outlined,
                            size: 64,
                            color: theme.textSecondaryColor.withOpacity(0.5),
                          ),
                          SizedBox(height: 16),
                          Text(
                            'لم تتابع أي إعلامي بعد',
                            style: GoogleFonts.cairo(
                              fontSize: 16,
                              color: theme.textSecondaryColor,
                            ),
                          ),
                        ],
                      ),
                    )
                  : ListView.builder(
                      itemCount: _followingList.length,
                      itemBuilder: (context, index) {
                        final journalistId = _followingList[index];
                        final journalist = verifiedJournalists.firstWhere(
                          (j) => j['id']?.toString() == journalistId,
                        );
                        return _buildJournalistCard(journalist);
                      },
                    ),
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      body: CustomScrollView(
        slivers: [
          SliverToBoxAdapter(child: _HeroHeader()),
          SliverToBoxAdapter(child: _AskDalmaTrendsButton()),
          SliverToBoxAdapter(child: _buildSearchSection()),
          SliverToBoxAdapter(child: _buildJournalistsList()),
          // مكان طلب المستخدم: اجعل "كيف أسجل كإعلامي؟" فوق المنشورات
          SliverToBoxAdapter(child: _buildJournalistRegistrationSection()),
          SliverToBoxAdapter(child: _buildPostsFeed()),
        ],
      ),
    );
  }

  Widget _buildSearchSection() {
    return Container(
      margin: EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Expanded(
                child: TextField(
                  controller: _searchController,
                  decoration: InputDecoration(
                    hintText: 'البحث عن الإعلاميين...',
                    hintStyle: GoogleFonts.cairo(),
                    prefixIcon: Icon(Icons.search, color: Color(0xFF10B981)),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: BorderSide(color: Colors.grey[300]!),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: BorderSide(color: Color(0xFF10B981)),
                    ),
                    filled: true,
                    fillColor: Colors.white,
                  ),
                  style: GoogleFonts.cairo(),
                ),
              ),
              SizedBox(width: 12),
              ElevatedButton.icon(
                onPressed: _showFollowingList,
                icon: Icon(Icons.people, size: 18),
                label: Text(
                  'قائمة المتابعين',
                  style: GoogleFonts.cairo(fontSize: 12),
                ),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Color(0xFF10B981),
                  foregroundColor: Colors.white,
                  padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildJournalistsList() {
    return Container(
      height: 180,
      margin: EdgeInsets.symmetric(vertical: 16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: EdgeInsets.symmetric(horizontal: 16),
            child: Text(
              'الإعلاميون المعتمدون',
              style: GoogleFonts.cairo(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Color(0xFF10B981),
              ),
            ),
          ),
          SizedBox(height: 12),
          Expanded(
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              padding: EdgeInsets.symmetric(horizontal: 16),
              itemCount: _filteredJournalists.length,
              itemBuilder: (context, index) {
                return _buildJournalistCard(_filteredJournalists[index]);
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildJournalistCard(Map<String, dynamic> journalist) {
    final journalistId = journalist['id']?.toString() ?? '';
    final isFollowing = _followingList.contains(journalistId);
    
    return Container(
      width: 260,
      margin: EdgeInsets.only(right: 12),
      padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 8,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Row(
            children: [
              CircleAvatar(
                radius: 18,
                backgroundImage: AssetImage(journalist['avatar']),
              ),
              SizedBox(width: 8),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      journalist['name'],
                      style: GoogleFonts.cairo(
                        fontSize: 11,
                        fontWeight: FontWeight.bold,
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    Text(
                      journalist['specialty'],
                      style: GoogleFonts.cairo(
                        fontSize: 9,
                        color: Colors.grey[600],
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    Text(
                      '${journalist['followers']} متابع',
                      style: GoogleFonts.cairo(
                        fontSize: 8,
                        color: Color(0xFF10B981),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          SizedBox(height: 6),
          Row(
            children: [
              Expanded(
                child: ElevatedButton(
                  onPressed: () => _showJournalistProfile(journalist),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.grey[100],
                    foregroundColor: Color(0xFF10B981),
                    padding: EdgeInsets.symmetric(vertical: 4),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(6),
                    ),
                  ),
                  child: Text(
                    'عرض الملف',
                    style: GoogleFonts.cairo(fontSize: 9),
                  ),
                ),
              ),
              SizedBox(width: 6),
              GestureDetector(
                onTap: () => _toggleFollow(journalistId),
                child: Container(
                  padding: EdgeInsets.all(4),
                  decoration: BoxDecoration(
                    color: isFollowing ? Color(0xFF10B981) : Colors.grey[200],
                    borderRadius: BorderRadius.circular(6),
                  ),
                  child: Icon(
                    isFollowing ? Icons.person_remove : Icons.person_add,
                    size: 14,
                    color: isFollowing ? Colors.white : Colors.grey[600],
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildPostsFeed() {
    final List<Map<String, dynamic>> repeatedPosts = List.generate(
      12,
      (index) => journalistPosts[index % journalistPosts.length],
    );
    return Container(
      margin: EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'آخر المنشورات',
            style: GoogleFonts.cairo(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Color(0xFF10B981),
            ),
          ),
          SizedBox(height: 16),
          ListView.builder(
            shrinkWrap: true,
            physics: NeverScrollableScrollPhysics(),
            itemCount: repeatedPosts.length,
            itemBuilder: (context, index) {
              return _buildPostCard(repeatedPosts[index]);
            },
          ),
        ],
      ),
    );
  }

  Widget _buildPostCard(Map<String, dynamic> post) {
    final journalist = verifiedJournalists.firstWhere(
      (j) => j['id'] == post['journalistId'],
    );

    return Container(
      margin: EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 8,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // رأس المنشور
          Padding(
            padding: EdgeInsets.all(16),
            child: Row(
              children: [
                CircleAvatar(
                  radius: 20,
                  backgroundImage: AssetImage(journalist['avatar']),
                ),
                SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Text(
                            journalist['name'],
                            style: GoogleFonts.cairo(
                              fontSize: 14,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          SizedBox(width: 4),
                          Icon(
                            Icons.verified,
                            size: 16,
                            color: Color(0xFF10B981),
                          ),
                        ],
                      ),
                      Text(
                        journalist['username'],
                        style: GoogleFonts.cairo(
                          fontSize: 12,
                          color: Colors.grey[600],
                        ),
                      ),
                    ],
                  ),
                ),
                Text(
                  post['timestamp'],
                  style: GoogleFonts.cairo(
                    fontSize: 12,
                    color: Colors.grey[500],
                  ),
                ),
              ],
            ),
          ),
          
          // محتوى المنشور
          Padding(
            padding: EdgeInsets.symmetric(horizontal: 16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  post['title'],
                  style: GoogleFonts.cairo(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                SizedBox(height: 8),
                Text(
                  post['content'],
                  style: GoogleFonts.cairo(
                    fontSize: 14,
                    height: 1.5,
                  ),
                ),
                SizedBox(height: 12),
                
                // الوسائط
                if (post['type'] == 'image')
                  _buildImagePost(post)
                else if (post['type'] == 'video')
                  _buildVideoPost(post),
                
                SizedBox(height: 12),
                
                // الهاشتاغات
                Wrap(
                  spacing: 8,
                  runSpacing: 4,
                  children: (post['hashtags'] as List<String>).map((tag) {
                    return GestureDetector(
                      onTap: () {},
                      child: Container(
                        padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                        decoration: BoxDecoration(
                          color: Color(0xFF10B981).withOpacity(0.1),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Text(
                          tag,
                          style: GoogleFonts.cairo(
                            fontSize: 12,
                            color: Color(0xFF10B981),
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                    );
                  }).toList(),
                ),
              ],
            ),
          ),
          
          // أزرار التفاعل (بدون تعليقات) مع اشتراط تسجيل الدخول وتأثيرات أنيميشن
          Padding(
            padding: EdgeInsets.all(16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                _buildLikeButton(post),
                _buildShareButton(post),
                _buildSaveButton(post),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildImagePost(Map<String, dynamic> post) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(12),
      child: Image.asset(
        post['imageUrl'],
        width: double.infinity,
        height: 200,
        fit: BoxFit.cover,
      ),
    );
  }

  Widget _buildVideoPost(Map<String, dynamic> post) {
    final String asset = (post['videoUrl'] as String?) ?? 'assets/videos/Download.mp4';
    return _TrendsAutoPlayVideo(assetPath: asset);
  }

  Widget _buildInteractionButton({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            icon,
            size: 20,
            color: Colors.grey[600],
          ),
          SizedBox(width: 4),
          Text(
            label,
            style: GoogleFonts.cairo(
              fontSize: 12,
              color: Colors.grey[600],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLikeButton(Map<String, dynamic> post) {
    final String id = post['id']?.toString() ?? '';
    final bool isLiked = _likedPosts.contains(id);
    return GestureDetector(
      onTap: () => _requireLogin(() {
        setState(() {
          if (isLiked) {
            _likedPosts.remove(id);
            post['likes'] = (post['likes'] as int) - 1;
          } else {
            _likedPosts.add(id);
            post['likes'] = (post['likes'] as int) + 1;
          }
        });
        _persistInteractions();
      }),
      child: TweenAnimationBuilder<double>(
        tween: Tween(begin: 1.0, end: isLiked ? 1.2 : 1.0),
        duration: const Duration(milliseconds: 250),
        curve: Curves.easeOutBack,
        builder: (context, scale, child) => Transform.scale(scale: scale, child: child),
        onEnd: () => setState(() {}),
        child: Row(
          children: [
            Icon(isLiked ? Icons.favorite : Icons.favorite_border, color: isLiked ? const Color(0xFFEF4444) : Colors.grey[600], size: 22),
            const SizedBox(width: 4),
            Text('${post['likes']}', style: GoogleFonts.cairo(fontSize: 12, color: Colors.grey[700])),
          ],
        ),
      ),
    );
  }

  Widget _buildSaveButton(Map<String, dynamic> post) {
    final String id = post['id']?.toString() ?? '';
    final bool isSaved = _savedPosts.contains(id);
    return GestureDetector(
      onTap: () => _requireLogin(() {
        setState(() {
          if (isSaved) {
            _savedPosts.remove(id);
          } else {
            _savedPosts.add(id);
          }
        });
        _persistInteractions();
      }),
      child: TweenAnimationBuilder<double>(
        tween: Tween(begin: 1.0, end: isSaved ? 1.15 : 1.0),
        duration: const Duration(milliseconds: 220),
        curve: Curves.easeOutBack,
        builder: (context, scale, child) => Transform.scale(scale: scale, child: child),
        onEnd: () => setState(() {}),
        child: Row(
          children: [
            Icon(isSaved ? Icons.bookmark : Icons.bookmark_border, color: isSaved ? const Color(0xFF10B981) : Colors.grey[600], size: 22),
            const SizedBox(width: 4),
            Text(isSaved ? 'محفوظ' : 'حفظ', style: GoogleFonts.cairo(fontSize: 12, color: Colors.grey[700])),
          ],
        ),
      ),
    );
  }

  Widget _buildShareButton(Map<String, dynamic> post) {
    return _buildInteractionButton(
      icon: Icons.share_outlined,
      label: '${post['shares']}',
      onTap: () => _requireLogin(() {
        // مشاركة مستقبلية
        NotificationsService.instance.toast('تم نسخ رابط المنشور', icon: Icons.link, color: const Color(0xFF059669));
        NotificationsService.instance.add(AppNotification(
          id: DateTime.now().millisecondsSinceEpoch.toString(),
          title: 'تمت المشاركة',
          body: post['title'] ?? 'منشور',
        ));
      }),
    );
  }

  void _openTikTokVideoPlayer(Map<String, dynamic> videoData) {
    // يمكن إضافة مشغل فيديو خارجي هنا في المستقبل
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('مشغل الفيديو'),
        content: Text('سيتم فتح مشغل الفيديو قريباً'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('إغلاق'),
          ),
        ],
      ),
    );
  }

// _AutoPlayVideo declared below after _TrendsPageState

  void _showJournalistProfile(Map<String, dynamic> journalist) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.8,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        ),
        child: Column(
          children: [
            Container(
              width: 40,
              height: 4,
              margin: EdgeInsets.symmetric(vertical: 12),
              decoration: BoxDecoration(
                color: Colors.grey[300],
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            Expanded(
              child: SingleChildScrollView(
                padding: EdgeInsets.all(20),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // صورة الملف الشخصي
                    CircleAvatar(
                      radius: 50,
                      backgroundImage: AssetImage(journalist['avatar']),
                    ),
                    SizedBox(height: 16),
                    
                    // الاسم والتحقق
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(
                          journalist['name'],
                          style: GoogleFonts.cairo(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        SizedBox(width: 8),
                        Icon(
                          Icons.verified,
                          size: 24,
                          color: Color(0xFF10B981),
                        ),
                      ],
                    ),
                    
                    SizedBox(height: 8),
                    Text(
                      journalist['username'],
                      style: GoogleFonts.cairo(
                        fontSize: 16,
                        color: Colors.grey[600],
                      ),
                    ),
                    
                    SizedBox(height: 16),
                    Text(
                      journalist['bio'],
                      style: GoogleFonts.cairo(
                        fontSize: 14,
                        height: 1.5,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    
                    SizedBox(height: 24),
                    
                    // الإحصائيات (منشورات + متابعون فقط)
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: [
                        _buildTwitterStat('المنشورات', (journalist['posts'] ?? 0).toString()),
                        _buildTwitterStat('المتابعون', (journalist['followers'] ?? 0).toString()),
                      ],
                    ),
                    SizedBox(height: 20),

                    // زر المتابعة (متاح فقط عند تسجيل الدخول)
                    Row(
                      children: [
                        Expanded(
                          child: (_isLoggedIn)
                              ? ElevatedButton.icon(
                                  onPressed: () {
                                    final journalistId = journalist['id']?.toString() ?? '';
                                    _toggleFollow(journalistId);
                                  },
                                  icon: Icon(
                                    () {
                                      final journalistId = journalist['id']?.toString() ?? '';
                                      return _followingList.contains(journalistId)
                                          ? Icons.person_remove
                                          : Icons.person_add;
                                    }(),
                                  ),
                                  label: Text(
                                    () {
                                      final journalistId = journalist['id']?.toString() ?? '';
                                      return _followingList.contains(journalistId)
                                          ? 'إلغاء المتابعة'
                                          : 'متابعة';
                                    }(),
                                  ),
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: () {
                                      final journalistId = journalist['id']?.toString() ?? '';
                                      return _followingList.contains(journalistId)
                                          ? Colors.grey[300]
                                          : Color(0xFF10B981);
                                    }(),
                                    foregroundColor: () {
                                      final journalistId = journalist['id']?.toString() ?? '';
                                      return _followingList.contains(journalistId)
                                          ? Colors.grey[700]
                                          : Colors.white;
                                    }(),
                                    padding: EdgeInsets.symmetric(vertical: 12),
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(12),
                                    ),
                                  ),
                                )
                              : OutlinedButton(
                                  onPressed: () {},
                                  style: OutlinedButton.styleFrom(
                                    side: BorderSide(color: Color(0xFF10B981)),
                                    padding: EdgeInsets.symmetric(vertical: 12),
                                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                                  ),
                                  child: Text('سجل الدخول لمتابعة الحساب', style: GoogleFonts.cairo(color: Color(0xFF10B981))),
                                ),
                        ),
                      ],
                    ),
                    
                    SizedBox(height: 16),
                    
                    // طرق التواصل
                    Text(
                      'طرق التواصل',
                      style: GoogleFonts.cairo(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF10B981),
                      ),
                    ),
                    
                    SizedBox(height: 16),
                    
                    Row(
                      children: [
                        Expanded(
                          child: _buildContactMethod(
                            icon: Icons.phone,
                            label: 'اتصال',
                            onTap: () => _contactJournalist(journalist['phone'], 'phone'),
                          ),
                        ),
                        SizedBox(width: 12),
                        Expanded(
                          child: _buildContactMethod(
                            icon: Icons.email,
                            label: 'بريد إلكتروني',
                            onTap: () => _contactJournalist(journalist['email'], 'email'),
                          ),
                        ),
                      ],
                    ),
                    SizedBox(height: 24),

                    // جميع منشورات الإعلامي
                    Text(
                      'منشورات ${journalist['name']}',
                      style: GoogleFonts.cairo(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF10B981),
                      ),
                    ),
                    SizedBox(height: 12),
                    ...journalistPosts
                        .where((p) => p['journalistId']?.toString() == (journalist['id']?.toString() ?? ''))
                        .map((p) => _buildPostCard(p))
                        .toList(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTwitterStat(String label, String value) {
    return Column(
      children: [
        Text(
          value,
          style: GoogleFonts.cairo(
            fontSize: 20,
            fontWeight: FontWeight.bold,
            color: Color(0xFF10B981),
          ),
        ),
        Text(
          label,
          style: GoogleFonts.cairo(
            fontSize: 12,
            color: Colors.grey[600],
          ),
        ),
      ],
    );
  }

  Widget _buildContactMethod({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: EdgeInsets.symmetric(vertical: 12, horizontal: 16),
        decoration: BoxDecoration(
          color: Colors.grey[50],
          borderRadius: BorderRadius.circular(12),
          border: Border.all(color: Colors.grey[200]!),
        ),
        child: Column(
          children: [
            Icon(
              icon,
              color: Color(0xFF10B981),
              size: 24,
            ),
            SizedBox(height: 8),
            Text(
              label,
              style: GoogleFonts.cairo(
                fontSize: 12,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _contactJournalist(String contact, String type) {
    if (type == 'phone') {
      launchUrl(Uri.parse('tel:$contact'));
    } else if (type == 'email') {
      launchUrl(Uri.parse('mailto:$contact'));
    }
  }

  Widget _buildJournalistRegistrationSection() {
    return Container(
      margin: EdgeInsets.all(16),
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Color(0xFF10B981).withOpacity(0.1),
            Color(0xFF059669).withOpacity(0.1),
          ],
        ),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: Color(0xFF10B981).withOpacity(0.2),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                Icons.verified_user,
                color: Color(0xFF10B981),
                size: 24,
              ),
              SizedBox(width: 8),
              Text(
                'كيف أسجل كإعلامي؟',
                style: GoogleFonts.cairo(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Color(0xFF10B981),
                ),
              ),
            ],
          ),
          SizedBox(height: 12),
          Text(
            'انضم إلى منصة الدلما كإعلامي معتمد وشارك أخبارك مع المجتمع',
            style: GoogleFonts.cairo(
              fontSize: 14,
              color: Colors.grey[700],
              height: 1.5,
            ),
          ),
          SizedBox(height: 16),
          ElevatedButton(
            onPressed: _showJournalistRegistrationInfo,
            style: ElevatedButton.styleFrom(
              backgroundColor: Color(0xFF10B981),
              foregroundColor: Colors.white,
              padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            child: Text(
              'عرض التفاصيل',
              style: GoogleFonts.cairo(
                fontSize: 14,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
    );
  }

  void _showJournalistRegistrationInfo() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.9,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        ),
        child: Column(
          children: [
            Container(
              width: 40,
              height: 4,
              margin: EdgeInsets.symmetric(vertical: 12),
              decoration: BoxDecoration(
                color: Colors.grey[300],
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            Expanded(
              child: SingleChildScrollView(
                padding: EdgeInsets.all(20),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'التسجيل كإعلامي معتمد',
                      style: GoogleFonts.cairo(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF10B981),
                      ),
                    ),
                    SizedBox(height: 24),
                    
                    _buildPolicySection(),
                    SizedBox(height: 24),
                    _buildRequirementsSection(),
                    SizedBox(height: 24),
                    _buildContactSection(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPolicySection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'سياسة الاستخدام والأخلاقيات',
          style: GoogleFonts.cairo(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: Color(0xFF10B981),
          ),
        ),
        SizedBox(height: 12),
        Container(
          padding: EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.grey[50],
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.grey[200]!),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildPolicyItem('الالتزام بالدقة والموضوعية في نقل الأخبار'),
              _buildPolicyItem('احترام الخصوصية وحقوق الآخرين'),
              _buildPolicyItem('عدم نشر محتوى مسيء أو مخالف للقيم'),
              _buildPolicyItem('الالتزام بالقوانين والأنظمة المحلية'),
              _buildPolicyItem('المحافظة على المهنية في التعامل مع المصادر'),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildPolicyItem(String text) {
    return Padding(
      padding: EdgeInsets.only(bottom: 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(
            Icons.check_circle,
            color: Color(0xFF10B981),
            size: 16,
          ),
          SizedBox(width: 8),
          Expanded(
            child: Text(
              text,
              style: GoogleFonts.cairo(
                fontSize: 14,
                height: 1.4,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRequirementsSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'متطلبات التسجيل',
          style: GoogleFonts.cairo(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: Color(0xFF10B981),
          ),
        ),
        SizedBox(height: 12),
        Container(
          padding: EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.grey[50],
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.grey[200]!),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildRequirementItem('شهادة صحفية أو خبرة في مجال الإعلام'),
              _buildRequirementItem('هوية شخصية سارية المفعول'),
              _buildRequirementItem('عينة من الأعمال الصحفية السابقة'),
              _buildRequirementItem('خطاب توصية من جهة عمل معتمدة'),
              _buildRequirementItem('التوقيع على سياسة الاستخدام والأخلاقيات'),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildRequirementItem(String text) {
    return Padding(
      padding: EdgeInsets.only(bottom: 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(
            Icons.assignment,
            color: Color(0xFF10B981),
            size: 16,
          ),
          SizedBox(width: 8),
          Expanded(
            child: Text(
              text,
              style: GoogleFonts.cairo(
                fontSize: 14,
                height: 1.4,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContactSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'طرق التواصل للتسجيل',
          style: GoogleFonts.cairo(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: Color(0xFF10B981),
          ),
        ),
        SizedBox(height: 12),
        Row(
          children: [
            Expanded(
              child: _buildContactMethod(
                icon: Icons.phone,
                label: 'اتصال هاتفي',
                onTap: () => _contactGeneral('tel:+966501234567'),
              ),
            ),
            SizedBox(width: 12),
            Expanded(
              child: _buildContactMethod(
                icon: Icons.email,
                label: 'بريد إلكتروني',
                onTap: () => _contactGeneral('mailto:info@aldlma.com'),
              ),
            ),
          ],
        ),
        SizedBox(height: 12),
        Container(
          width: double.infinity,
          child: _buildContactMethod(
            icon: Icons.location_on,
            label: 'زيارة المكتب',
            onTap: () => _contactGeneral('https://maps.google.com'),
          ),
        ),
        SizedBox(height: 16),
        Container(
          padding: EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Color(0xFF10B981).withOpacity(0.1),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Color(0xFF10B981).withOpacity(0.3)),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'معلومات التواصل',
                style: GoogleFonts.cairo(
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                  color: Color(0xFF10B981),
                ),
              ),
              SizedBox(height: 8),
              Text(
                'الهاتف: +966 50 123 4567\nالبريد الإلكتروني: info@aldlma.com\nالعنوان: مدينة عرعر، المملكة العربية السعودية',
                style: GoogleFonts.cairo(
                  fontSize: 12,
                  height: 1.5,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  void _contactGeneral(String url) {
    launchUrl(Uri.parse(url));
  }
}

// زر اسأل الدلما عن الترندات
class _AskDalmaTrendsButton extends StatelessWidget {
  const _AskDalmaTrendsButton();

  @override
  Widget build(BuildContext context) {
    return Container(
      width: double.infinity,
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            Theme.of(context).colorScheme.primary,
            Theme.of(context).colorScheme.primary.withOpacity(0.85),
          ],
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Theme.of(context).colorScheme.primary.withOpacity(0.25),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          borderRadius: BorderRadius.circular(16),
          onTap: () {
            showDialog(context: context, builder: (_) => const AskDalmaDialog());
          },
          child: const Padding(
            padding: EdgeInsets.symmetric(vertical: 16, horizontal: 20),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(Icons.psychology_outlined, color: Colors.white, size: 24),
                SizedBox(width: 12),
                Text('اسأل الدلما عن الترندات', style: TextStyle(color: Colors.white, fontSize: 16, fontWeight: FontWeight.w700)),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

// Standalone auto-play video declared after the page to avoid context mixups
class _TrendsAutoPlayVideo extends StatefulWidget {
  final String assetPath;
  const _TrendsAutoPlayVideo({required this.assetPath});

  @override
  State<_TrendsAutoPlayVideo> createState() => _TrendsAutoPlayVideoState();
}

class _TrendsAutoPlayVideoState extends State<_TrendsAutoPlayVideo> {
  VideoPlayerController? _controller;
  bool _initialized = false;
  bool _muted = true;
  bool _visible = false;

  Future<void> _initIfNeeded() async {
    if (_controller != null) return;
    final c = VideoPlayerController.asset(widget.assetPath);
    await c.initialize();
    await c.setLooping(true);
    await c.setVolume(0.0);
    setState(() {
      _controller = c;
      _initialized = true;
    });
    if (_visible) await c.play();
  }

  @override
  void dispose() {
    _controller?.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final double h = MediaQuery.of(context).size.height * 0.62;
    return VisibilityDetector(
      key: ValueKey('auto-video-${widget.assetPath}-${hashCode}'),
      onVisibilityChanged: (info) async {
        _visible = info.visibleFraction > 0.6;
        if (_visible) {
          await _initIfNeeded();
          if (_controller != null && _controller!.value.isInitialized) {
            await _controller!.play();
          }
        } else {
          if (_controller != null && _controller!.value.isInitialized) {
            await _controller!.pause();
          }
        }
      },
      child: ClipRRect(
        borderRadius: BorderRadius.circular(12),
        child: Container(
          height: h,
          width: double.infinity,
          color: Colors.black,
          child: Stack(
            fit: StackFit.expand,
            children: [
              if (_initialized && _controller != null && _controller!.value.isInitialized)
                FittedBox(
                  fit: BoxFit.cover,
                  child: SizedBox(
                    width: _controller!.value.size.width,
                    height: _controller!.value.size.height,
                    child: VideoPlayer(_controller!),
                  ),
                )
              else
                Image.asset('assets/img/تنزيل.jpeg', fit: BoxFit.cover),

              Positioned(
                right: 12,
                bottom: 12,
                child: GestureDetector(
                  onTap: () async {
                    if (_controller == null || !_initialized) return;
                    final nowMuted = !_muted;
                    setState(() => _muted = nowMuted);
                    await _controller!.setVolume(nowMuted ? 0.0 : 1.0);
                  },
                  child: Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.black45,
                      borderRadius: BorderRadius.circular(24),
                    ),
                    child: Icon(
                      _muted ? Icons.volume_off : Icons.volume_up,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class _HeroHeader extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final color = Theme.of(context).colorScheme.primary;
    return Container(
      padding: const EdgeInsets.only(top: 12, bottom: 20),
      decoration: const BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [Color(0xFFFEF3E2), Color(0xFFECFDF5), Color(0xFFFEF3E2)],
        ),
      ),
      child: Stack(
        alignment: Alignment.center,
        children: [
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
        child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                const SizedBox(height: 48),
                // Top row with login button and icons
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const _LoginButton(),
                    Row(
                      children: const [
                        _IconButton(icon: Icons.nightlight_round_outlined),
                        SizedBox(width: 8),
                        NotificationsBell(),
                      ],
                    ),
                  ],
                ),
                const SizedBox(height: 32),
                // Logo with glow effect
                Center(
                  child: Stack(
                    alignment: Alignment.center,
                    children: [
                      // Soft radial glow exactly like in the image
                      Container(
                        width: 350,
                        height: 350,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          gradient: RadialGradient(
                            colors: [
                              color.withOpacity(0.25),
                              color.withOpacity(0.15),
                              color.withOpacity(0.08),
                              color.withOpacity(0.03),
                              Colors.transparent,
                            ],
                            stops: const [0.0, 0.3, 0.5, 0.7, 1.0],
                          ),
                        ),
                      ),
                      // Logo
                      Image.asset('assets/img/aldlma.png', width: 176, height: 176),
                    ],
                  ),
                ),
                const SizedBox(height: 24),
                // Title - exactly as in reference
                Text(
                  'الدلما... زرعها طيب، وخيرها باقٍ',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    fontSize: 32,
                    fontWeight: FontWeight.w800,
                    color: Theme.of(context).colorScheme.secondary,
                    height: 1.2,
                  ),
                ),
                const SizedBox(height: 16),
                // Description
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 8),
                  child: Text(
                    'الدلما منصة مجتمعية تقنية تربطك بخدمات مدينتك، من أهل عرعر إلى أهلها، نوصلك بالأفضل… بضغطة زر.',
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      color: Theme.of(context).colorScheme.primary,
                      fontSize: 18,
                      height: 1.6,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class _LoginButton extends StatelessWidget {
  const _LoginButton({super.key});
  @override
  Widget build(BuildContext context) {
    return InkWell(
      borderRadius: const BorderRadius.all(Radius.circular(6)),
      onTap: () {
        if (AuthState.instance.isLoggedIn) {
          AuthState.instance.logout();
          NotificationsService.instance.toast('تم تسجيل الخروج', icon: Icons.logout, color: const Color(0xFFEF4444));
        } else {
          Navigator.push(context, MaterialPageRoute(builder: (_) => const LoginPage()));
        }
      },
      child: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(colors: [Color(0xFFD97706), Color(0xFF059669)]),
          borderRadius: BorderRadius.all(Radius.circular(6)),
          boxShadow: [
            BoxShadow(
              color: Colors.black12,
              blurRadius: 8,
              offset: Offset(0, 2),
            ),
          ],
        ),
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
        child: AnimatedBuilder(
          animation: AuthState.instance,
          builder: (context, _) {
            final isIn = AuthState.instance.isLoggedIn;
            return Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(isIn ? Icons.logout : Icons.person_outline, color: Colors.white, size: 16),
                const SizedBox(width: 8),
                Text(isIn ? 'تسجيل الخروج' : 'تسجيل الدخول', 
                  style: const TextStyle(color: Colors.white, fontWeight: FontWeight.w600, fontSize: 14)),
              ],
            );
          },
        ),
      ),
    );
  }
}

class _IconButton extends StatelessWidget {
  final IconData icon;
  const _IconButton({required this.icon});
  @override
  Widget build(BuildContext context) {
    return Container(
      width: 40,
      height: 40,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.06),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Center(
        child: Icon(
          icon, 
          color: const Color(0xFF6B7280), 
          size: 20,
        ),
      ),
    );
  }
}

class _IconBadge extends StatelessWidget {
  final IconData icon;
  final String? count;
  final Color badgeColor;
  const _IconBadge({required this.icon, this.count, this.badgeColor = Colors.red});
  @override
  Widget build(BuildContext context) {
    return Container(
      width: 40,
      height: 40,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.06),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Stack(
        clipBehavior: Clip.none,
        children: [
          Center(
            child: Icon(
              icon, 
              color: const Color(0xFF6B7280), 
              size: 20,
            ),
          ),
          if (count != null)
            Positioned(
              top: -4,
              left: -4,
              child: Container(
                width: 18,
                height: 18,
                decoration: BoxDecoration(
                  color: badgeColor,
                  borderRadius: BorderRadius.circular(9),
                  border: Border.all(color: Colors.white, width: 2),
                ),
                child: Center(
                  child: Text(
                    count!, 
                    style: const TextStyle(
                      color: Colors.white, 
                      fontSize: 10, 
                      fontWeight: FontWeight.w700,
                    ),
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }
}
